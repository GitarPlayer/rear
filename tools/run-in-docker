#!/usr/bin/env bash
#
# run given command via Docker on all distros supported by ReaR, or only a single one

# command line args:
#
# $0 [os ...] -- <command> [args ...]

# Define the list of supported images
declare -r IMAGES=(
    ubuntu:{18.04,20.04,22.04,devel}
    debian:{8,9,10,11,unstable}
    opensuse/leap:{15.4,15}
    registry.suse.com/suse/{sles12sp5,sle15}
    centos:{6,7,8} # discontinued
    sl:{6,7}       # discontinued
    quay.io/centos/centos:stream{8,9}
    registry.access.redhat.com/ubi{7,8,9}
    fedora:{29,30,31,32,33,34,35,36,37,38,rawhide}
    archlinux
    manjarolinux/base
)

declare -r HELP_TEXT="
$0 [image ...] -- <command> [args ...]
specify image patterns or omit image to run in all supported images:

$(fold -sw 60 <<<"${IMAGES[*]}")

You can also specify completely different Docker images instead.

Without command it will show the Bash version

Architecture defaults to the host platform, specify architecture via
-a <architecture>, e.g. -a amd64 on M1 Mac
"

function die {
    echo -e "ERROR: $*" 1>&2
    exit 1
}

extra_docker_args=()
use_images=()
command_args=()
while test $# -gt 0; do
    case "$1" in
    -a)
        echo "Using architecture $2 instead of default Docker architecture $(docker system info --format '{{.Architecture}}')"
        extra_docker_args+=("--platform" "linux/$2")
        shift 2
        ;;
    -h|--help)
        echo "$HELP_TEXT"
        exit 1
        ;;
    --)
        shift
        [[ $# -gt 0 ]] && command_args=("$@")
        break
        ;;
    *)
        use_images+=($(
            let c=0
            for image in "${IMAGES[@]}"; do
                if [[ "$image" == *$1* ]]; then
                    echo "$image"
                    let c++
                fi
            done
            if ((c == 0)); then
                echo "$1"
            fi
        ))
        shift
        ;;
    esac
done

if test ${#use_images[@]} -eq 0; then
    use_images=("${IMAGES[@]}")
fi

if test ${#command_args[@]} -eq 0; then
    command_args=("echo" "Bash is \$BASH_VERSION")
fi

rear_toplevel_dir=$(dirname $(dirname $(readlink -f "$0")))

# declare -p IMAGES use_images command_args rear_toplevel_dir ; exit 0

for image in "${use_images[@]}"; do
    printf "********** %-40s **********\n" "$image" 1>&2
    docker run \
        --rm -i \
        --sig-proxy=false \
        -v "$rear_toplevel_dir:/rear" \
        -w /rear \
        "${extra_docker_args[@]}" \
        "$image" \
        /bin/bash <<<"${command_args[@]}"
done
