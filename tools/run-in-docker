#!/usr/bin/env bash
#
# run given command via Docker on all distros supported by ReaR, or only a single one

# command line args:
#
# $0 [os ...] -- <command> [args ...]

# Define the list of supported images
declare -r IMAGES=(
    ubuntu:{18.04,20.04,22.04,devel}
    debian:{8,9,10,11,unstable}
    opensuse/leap:{42,15.4,15}
    registry.suse.com/suse/sle15
    centos:{6,7,8} # discontinued
    sl:7           # discontinued
    quay.io/centos/centos:stream{8,9}
    # registry.access.redhat.com/ubi{7,8,9} basic packages like parted are missing
    fedora:{29,31,34,37,38,rawhide}
    archlinux
    manjarolinux/base
)

declare -r HELP_TEXT="
$0 [image ...] -- <command> [args ...]
specify image patterns or omit image to run in all supported images:

$(fold -sw 60 <<<"${IMAGES[*]}")

You can also specify completely different Docker images instead.

Without command it will show the Bash version

Special commands:

--patch     Patch the (given or all) images to contain the ReaR build and run dependencies

Architecture defaults to the host platform, specify architecture via
-a <architecture>, e.g. -a amd64 on M1 Mac
"

function die {
    echo -e "ERROR: $*" 1>&2
    exit 1
}

function exit_handler {
    echo "** SCRIPT RUN TIME $SECONDS SECONDS **"
}
trap exit_handler EXIT

extra_docker_args=()
use_images=()


# patch the images to contain all ReaR build and run dependencies
function patch_images() {
    for image in "${use_images[@]}"; do
        local DOCKERFILE="
FROM $image
LABEL description=\"$image patched to build and run ReaR\"
SHELL [\"/bin/bash\", \"-xeuo\", \"pipefail\", \"-c\"]
ENV DEBIAN_FRONTEND=noninteractive

RUN type -p apt-get &>/dev/null || exit 0 ;\
    apt-get -y update ;\
    apt-get -y --allow-unauthenticated install </dev/null \
        sysvinit-utils kbd cpio file procps ethtool iputils-ping net-tools dosfstools binutils parted openssl gawk attr bc psmisc nfs-client portmap xorriso isolinux gdisk syslinux syslinux-common syslinux-efi iproute2 \
        make asciidoctor git build-essential debhelper devscripts ;\
    apt-get -y --allow-unauthenticated install </dev/null fdisk ||\
        apt-get -y --allow-unauthenticated install </dev/null util-linux

RUN type -p zypper &>/dev/null || exit 0 ;\
    zypper --no-gpg-checks --quiet --non-interactive install \
        sysvinit-tools kbd cpio binutils ethtool gzip iputils parted tar openssl gawk attr bc syslinux portmap rpcbind iproute2 nfs-client xorriso mkisofs util-linux psmisc \
        make git rpm-build ;\
    zypper --no-gpg-checks --quiet --non-interactive install 'rubygem(asciidoctor)' || \
        zypper --no-gpg-checks --quiet --non-interactive install asciidoc xmlto

RUN type -p pacman &>/dev/null || exit 0 ;\
    pacman --noconfirm -Sy \
        sysvinit-tools kbd cpio binutils ethtool gzip iputils parted tar openssl gawk attr bc syslinux rpcbind iproute2 nfs-utils libisoburn cdrtools util-linux psmisc procps-ng util-linux \
        make binutils fakeroot git asciidoctor

# CentOS 8 doesn't have sysvinit-tools any more but it also doens't have asciidoctor yet
RUN type -p yum &>/dev/null || exit 0 ;\
    grep -E '(CentOS.*Final|CentOS Linux release 8)' /etc/redhat-release && \
        sed -i -e 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|' -e '/^mirror/d' /etc/yum.repos.d/*.repo ; \
    yum -q --nogpgcheck install -y \
        kbd cpio binutils ethtool gzip iputils parted tar openssl gawk attr bc syslinux rpcbind iproute nfs-utils xorriso genisoimage util-linux psmisc procps-ng util-linux \
        make binutils git rpm-build ; \
    yum -q --nogpgcheck install -y sysvinit-tools mkisofs asciidoc xmlto || \
        yum -q --nogpgcheck install -y asciidoctor || \
            yum -q --nogpgcheck install -y mkisofs asciidoc xmlto

RUN git config --global --add safe.directory /rear
"

        # TODO: Add support for GRUB2
        printf "********** PATCHING %-40s **********\n" "$image" 1>&2
        read oldsize junk < <(docker images --format '{{.VirtualSize}}' "$image")
        docker buildx build -t "$image" \
            "${extra_docker_args[@]}" \
            - <<<"$DOCKERFILE" || die "Failed building $image"
        read newsize junk < <(docker images --format '{{.VirtualSize}}' "$image")
        test "$oldsize" != "$newsize" && printf "********** %-35s %7s -> %-7s *****\n" "$image" "$oldsize" "$newsize" 
    done
}

command_args=()
while test $# -gt 0; do
    case "$1" in
    (-a)
        echo "Using architecture $2 instead of default Docker architecture $(docker system info --format '{{.Architecture}}')"
        extra_docker_args+=("--platform" "linux/$2")
        shift 2
        ;;
    (-h|--help)
        echo "$HELP_TEXT"
        exit 1
        ;;
    (--)
        shift
        [[ $# -gt 0 ]] && command_args=("$@")
        break
        ;;
    (*)
        #shellcheck disable=SC2207
        use_images+=($(
            ((c=0))
            for image in "${IMAGES[@]}"; do
                if [[ "$image" == *$1* ]]; then
                    echo "$image"
                    ((c++))
                fi
            done
            if ((c == 0)); then
                echo "$1"
            fi
        ))
        shift
        ;;
    esac
done

if test ${#use_images[@]} -eq 0; then
    use_images=("${IMAGES[@]}")
fi

if test ${#command_args[@]} -eq 0; then
    command_args=("echo" "Bash is \$BASH_VERSION")
fi

rear_toplevel_dir=$(dirname $(dirname $(readlink -f "$0")))

# declare -p IMAGES use_images command_args rear_toplevel_dir ; exit 0

case "${command_args[0]}" in
    (--patch)
        patch_images
        exit $?
    ;;
    (*)
        for image in "${use_images[@]}"; do
            printf "********** %-40s **********\n" "$image" 1>&2
            dist_dest="dist-all/$(tr -cs '0-9a-zA-Z-_' - <<<"$image")"
            # BUG: Docker runs as root, creating build and dist as root, too
            # SOLUTION: ?
            rm -Rf "$rear_toplevel_dir"/{build,dist,etc/rear/os.conf,var/log/rear} "$rear_toplevel_dir/${dist_dest:?}" 2>/dev/null ||\
                sudo rm -Rf "$rear_toplevel_dir"/{build,dist,etc/rear/os.conf,var/log/rear} "$rear_toplevel_dir/${dist_dest:?}" ||\
                    die "Cannot clean up ReaR directory"
            docker run \
                --rm -i \
                --sig-proxy=false \
                -v "$rear_toplevel_dir:/rear" \
                -w /rear \
                "${extra_docker_args[@]}" \
                "$image" \
                /bin/bash <<<"${command_args[@]}" || die "############### DOCKER RUN FAILED FOR $image"
            if test "$(ls -l "$rear_toplevel_dir/dist" 2>/dev/null || :)" ; then
                echo "********** Copying dist to ${dist_dest}"
                mkdir -p "$rear_toplevel_dir/$dist_dest" || die "Could not mkdir $rear_toplevel_dir/$dist_dest"
                cp -axT "$rear_toplevel_dir/dist/" "$rear_toplevel_dir/$dist_dest/" || die "Could not copy dist to $dist_dest"
            fi
        done
    ;;
esac


